{"ast":null,"code":"export const brand = value => {\n  if (value == '') {\n    return {\n      message: 'Brand is required',\n      error: true\n    };\n  } else {\n    return {\n      message: '',\n      error: false\n    };\n  }\n};\nexport const price = value => {\n  if (value == '') {\n    return {\n      message: 'Price is required',\n      error: true\n    };\n  } else if (value < 0) {\n    return {\n      message: 'Price must be a positive number ',\n      error: true\n    };\n  } else {\n    return {\n      message: '',\n      error: false\n    };\n  }\n};\nexport const year = value => {\n  if (value == '') {\n    return {\n      message: 'Year is required',\n      error: true\n    };\n  } else if (value < 1900) {\n    return {\n      message: 'Year must be greater than 1899 ',\n      error: true\n    };\n  } else if (value > 2021) {\n    return {\n      message: 'Year must be less than 2022 ',\n      error: true\n    };\n  } else {\n    return {\n      message: '',\n      error: false\n    };\n  }\n};\nexport const category = value => {\n  if (value == '' || value == 'Choose category') {\n    return {\n      message: 'Category is required',\n      error: true\n    };\n  } else {\n    return {\n      message: '',\n      error: false\n    };\n  }\n};\nexport const mileage = value => {\n  if (value == '') {\n    return {\n      message: 'Mileage is required',\n      error: true\n    };\n  } else if (value < 0) {\n    return {\n      message: 'Mileage must be a positive number or 0',\n      error: true\n    };\n  } else {\n    return {\n      message: '',\n      error: false\n    };\n  }\n};\nexport const horsePower = value => {\n  if (value == '') {\n    return {\n      message: 'Horse power is required',\n      error: true\n    };\n  } else if (value < 0) {\n    return {\n      message: 'Mileage must be a positive number',\n      error: true\n    };\n  } else {\n    return {\n      message: '',\n      error: false\n    };\n  }\n};\nexport const fuel = value => {\n  if (value == '' || value == 'Choose fuel') {\n    return {\n      message: 'Fuel is required',\n      error: true\n    };\n  } else {\n    return {\n      message: '',\n      error: false\n    };\n  }\n};\nexport const color = value => {\n  value = Number(value);\n\n  if (value == '') {\n    return {\n      message: 'Color is required',\n      error: true\n    };\n  } else if (!isNaN(value)) {\n    return {\n      message: 'The color should be a string',\n      error: true\n    };\n  } else {\n    return {\n      message: '',\n      error: false\n    };\n  }\n};\nexport const gearbox = value => {\n  if (value == '' || value == 'Choose gearbox') {\n    return {\n      message: 'Gearbox is required',\n      error: true\n    };\n  } else {\n    return {\n      message: '',\n      error: false\n    };\n  }\n};\nexport const extras = value => {\n  if (value == '') {\n    return {\n      message: 'Extras is required',\n      error: true\n    };\n  } else if (!isNaN(value)) {\n    return {\n      message: 'The extras should be a string',\n      error: true\n    };\n  } else if (value.length < 10) {\n    return {\n      message: 'Extras must be 10 characters or more',\n      error: true\n    };\n  } else {\n    return {\n      message: '',\n      error: false\n    };\n  }\n};\nexport const description = value => {\n  if (value == '') {\n    return {\n      message: 'Description is required',\n      error: true\n    };\n  } else if (!isNaN(value)) {\n    return {\n      message: 'The description should be a string',\n      error: true\n    };\n  } else if (value.length < 10) {\n    return {\n      message: 'Description must be 15characters or more',\n      error: true\n    };\n  } else {\n    return {\n      message: '',\n      error: false\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/car-dealers-react/src/components/Create/validation.js"],"names":["brand","value","message","error","price","year","category","mileage","horsePower","fuel","color","Number","isNaN","gearbox","extras","length","description"],"mappings":"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","sourcesContent":["export const brand = (value) => {\r\n\r\n    if (value == '') {\r\n        return { message: 'Brand is required', error: true }\r\n    } else {\r\n        return { message: '', error: false }\r\n    }\r\n\r\n}\r\nexport const price = (value) => {\r\n\r\n    if (value == '') {\r\n        return { message: 'Price is required', error: true }\r\n    } else if (value < 0) {\r\n        return { message: 'Price must be a positive number ', error: true }\r\n    }\r\n    else {\r\n        return { message: '', error: false }\r\n    }\r\n\r\n}\r\nexport const year = (value) => {\r\n\r\n    if (value == '') {\r\n        return { message: 'Year is required', error: true }\r\n    } else if (value < 1900) {\r\n        return { message: 'Year must be greater than 1899 ', error: true }\r\n    } else if (value > 2021) {\r\n        return { message: 'Year must be less than 2022 ', error: true }\r\n    }\r\n    else {\r\n        return { message: '', error: false }\r\n    }\r\n}\r\n\r\nexport const category = (value) => {\r\n\r\n    if (value == '' || value == 'Choose category') {\r\n        return { message: 'Category is required', error: true }\r\n    }\r\n    else {\r\n        return { message: '', error: false }\r\n    }\r\n\r\n}\r\n\r\nexport const mileage = (value) => {\r\n\r\n    if (value == '') {\r\n        return { message: 'Mileage is required', error: true }\r\n    } else if (value < 0) {\r\n        return { message: 'Mileage must be a positive number or 0', error: true }\r\n    }\r\n    else {\r\n        return { message: '', error: false }\r\n    }\r\n\r\n}\r\nexport const horsePower = (value) => {\r\n\r\n    if (value == '') {\r\n        return { message: 'Horse power is required', error: true }\r\n    } else if (value < 0) {\r\n        return { message: 'Mileage must be a positive number', error: true }\r\n    }\r\n    else {\r\n        return { message: '', error: false }\r\n    }\r\n}\r\n\r\nexport const fuel = (value) => {\r\n\r\n    if (value == '' || value == 'Choose fuel') {\r\n        return { message: 'Fuel is required', error: true }\r\n    }\r\n    else {\r\n        return { message: '', error: false }\r\n    }\r\n}\r\nexport const color = (value) => {\r\n    value = Number(value)\r\n    if (value == '') {\r\n        return { message: 'Color is required', error: true }\r\n    } else if (!(isNaN(value))) {\r\n        return { message: 'The color should be a string', error: true }\r\n    }\r\n    else {\r\n        return { message: '', error: false }\r\n    }\r\n\r\n}\r\n\r\nexport const gearbox = (value) => {\r\n\r\n    if (value == '' || value == 'Choose gearbox') {\r\n        return { message: 'Gearbox is required', error: true }\r\n    }\r\n    else {\r\n        return { message: '', error: false }\r\n    }\r\n}\r\nexport const extras = (value) => {\r\n    if (value == '') {\r\n        return { message: 'Extras is required', error: true }\r\n    } else if (!(isNaN(value))) {\r\n        return { message: 'The extras should be a string', error: true }\r\n    } else if (value.length < 10) {\r\n        return { message: 'Extras must be 10 characters or more', error: true }\r\n    } \r\n    else {\r\n        return { message: '', error: false }\r\n    }\r\n\r\n}\r\nexport const description = (value) => {\r\n    if (value == '') {\r\n        return { message: 'Description is required', error: true }\r\n    } else if (!(isNaN(value))) {\r\n        return { message: 'The description should be a string', error: true }\r\n    } else if (value.length < 10) {\r\n        return { message: 'Description must be 15characters or more', error: true }\r\n    } \r\n    else {\r\n        return { message: '', error: false }\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}